<?php
/**
 * WL Customizer.
 *
 * Use this class to fields to Customizer.
 * Here you can find some field types examples. Expand accordingly. External fields may be used.
 * If not needed please remove, don't forget to update
 * functions.php accordingly.
 *
 * WARNING: This file is part of the WL Base theme. DO NOT edit this file
 * under any circumstances, as the changes will be lost in the case of a theme update.
 * Please do all modifications in the form of a child theme.
 *
 * @since   1.0.0
 * @package WL\Theme\Base
 * @author  Nucleus
 * @license GPL-2.0+
 * @link    http://nucleus.eti.br/
 */

namespace WL\Theme;

/**
 * Theme customizer options.
 *
 * @since  1.0.0
 * @author Nucleus
 */
class Customizer {


	/**
	 * Panel ID.
	 *
	 * @since  1.0.0
	 * @access private
	 * @var    string
	 */
	private $panel_id = 'wl_options';

	/**
	 * Setup hooks.
	 *
	 * @since 1.0.0
	 */
	public function ready() {
		add_action( 'customize_register', array( $this, 'register_panel' ), 15 );
		add_action( 'customize_register', array( $this, 'register_general_section' ) );
	}

	/**
	 * Register the theme options panel.
	 *
	 * @since 1.0.0
	 * @param \WP_Customize_Manager $wp_customize Customizer instance.
	 */
	public function register_panel( $wp_customize ) {
		$wp_customize->add_panel(
			$this->panel_id,
			array(
				'title'          => __( 'Theme Options', 'wl-base' ),
				'description'    => '',
				'priority'       => 10,
				'capability'     => 'edit_theme_options',
				'theme_supports' => '',
			)
		);
	}

	/**
	 * Register the general section.
	 *
	 * @since 1.0.0
	 * @param \WP_Customize_Manager $wp_customize Customizer instance.
	 */
	public function register_general_section( $wp_customize ) {

		$section_id = $this->get_section_id( 'general_settings' );

		$wp_customize->add_section(
			$section_id,
			array(
				'panel'          => $this->panel_id,
				'title'          => __( 'General', 'wl-base' ),
				'description'    => '',
				'priority'       => 10,
				'capability'     => 'edit_theme_options',
				'theme_supports' => '',
			)
		);

		$fields = array(
			'logo'        => array(
				'type'        => 'media',
				'label'       => _x( 'Logo', 'General Settings', 'wl-base' ),
				'description' => __( 'The WL Base Logo.', 'wl-base' ),
			),
			'wl_text'     => array(
				'label'       => _x( 'wl-base Text Field', 'General Settings', 'wl-base' ),
				'description' => __( 'Please enter your text here...', 'wl-base' ),
			),
			'wl_media'    => array(
				'type'        => 'media',
				'label'       => _x( 'wl-base Media', 'General Settings', 'wl-base' ),
				'description' => __( 'Choose your image', 'wl-base' ),
			),
			'wl_textarea' => array(
				'type'        => 'textarea',
				'label'       => _x( 'wl-base Textarea Field', 'General Settings', 'wl-base' ),
				'description' => __( 'Please enter your text here...', 'wl-base' ),
			),
			'email'       => array(
				'type'              => 'email',
				'label'             => _x( 'Email', 'General Settings', 'wl-base' ),
				'description'       => __( 'Leave empty if it does not apply.', 'wl-base' ),
				'sanitize_callback' => 'sanitize_email',
			),
			'facebook'    => array(
				'type'              => 'url',
				'label'             => _x( 'Facebook', 'General Settings', 'wl-base' ),
				'description'       => __( 'Leave empty if it does not apply.', 'wl-base' ),
				'sanitize_callback' => 'esc_url',
			),
			'googleplus'  => array(
				'type'              => 'url',
				'label'             => _x( 'Google+', 'General Settings', 'wl-base' ),
				'description'       => __( 'Leave empty if it does not apply.', 'wl-base' ),
				'sanitize_callback' => 'esc_url',
			),
			'instagram'   => array(
				'type'              => 'url',
				'label'             => _x( 'Instagram', 'General Settings', 'wl-base' ),
				'description'       => __( 'Leave empty if it does not apply.', 'wl-base' ),
				'sanitize_callback' => 'esc_url',
			),
			'linkedin'    => array(
				'type'              => 'url',
				'label'             => _x( 'LinkedIn', 'General Settings', 'wl-base' ),
				'description'       => __( 'Leave empty if it does not apply.', 'wl-base' ),
				'sanitize_callback' => 'esc_url',
			),
			'pinterest'   => array(
				'type'              => 'url',
				'label'             => _x( 'Pinterest', 'General Settings', 'wl-base' ),
				'description'       => __( 'Leave empty if it does not apply.', 'wl-base' ),
				'sanitize_callback' => 'esc_url',
			),
			'twitter'     => array(
				'type'              => 'url',
				'label'             => _x( 'Twitter', 'General Settings', 'wl-base' ),
				'description'       => __( 'Leave empty if it does not apply.', 'wl-base' ),
				'sanitize_callback' => 'esc_url',
			),
			'vimeo'       => array(
				'type'              => 'url',
				'label'             => _x( 'Vimeo', 'General Settings', 'wl-base' ),
				'description'       => __( 'Leave empty if it does not apply.', 'wl-base' ),
				'sanitize_callback' => 'esc_url',
			),
			'youtube'     => array(
				'type'              => 'url',
				'label'             => _x( 'Youtube', 'General Settings', 'wl-base' ),
				'description'       => __( 'Leave empty if it does not apply.', 'wl-base' ),
				'sanitize_callback' => 'esc_url',
			),
		);

		$this->register_fields( $wp_customize, $fields, $section_id );
	}


	/**
	 * Determine if we are using a 12h or a 24h format.
	 *
	 * @since  1.0.0
	 * @return bool If true, will use the 12h format. False, for the 24h format.
	 */
	public static function use_am_pm() {
		return (bool) preg_match( '/g|h/', get_option( 'time_format' ) );
	}

	/**
	 * Register a set of fields for a section or a panel.
	 *
	 * @since  1.0.0
	 * @access private
	 * @param  \WP_Customize_Manager $wp_customize Customizer instance.
	 * @param  array                 $fields       The fields to register
	 * @param  string                $section_id   The section ID.
	 */
	private function register_fields( $wp_customize, $fields, $section_id = '' ) {

		if ( empty( $fields ) ) {
			return;
		}

		if ( empty( $section_id ) ) {
			$section_id = $this->panel_id;
		}

		foreach ( $fields as $key => $field ) {

			$field_id          = $this->get_field_id( $key );
			$field_default     = ! empty( $field['default'] ) ? $field['default'] : '';
			$sanitize_callback = ! empty( $field['sanitize_callback'] ) ? $field['sanitize_callback'] : 'sanitize_text_field';

			$wp_customize->add_setting(
				$field_id,
				array(
					'default'           => $field_default,
					'type'              => 'option',
					'capability'        => 'edit_theme_options',
					'transport'         => 'refresh',
					'sanitize_callback' => $sanitize_callback,
				)
			);

			$field_type = ! empty( $field['type'] ) ? $field['type'] : 'text';
			$field_args = array(
				'type'            => $field_type,
				'label'           => ! empty( $field['label'] ) ? $field['label'] : '',
				'description'     => ! empty( $field['description'] ) ? $field['description'] : '',
				'priority'        => ! empty( $field['priority'] ) ? $field['priority'] : 10,
				'section'         => $section_id,
				'settings'        => $field_id,
				'choices'         => ! empty( $field['choices'] ) ? $field['choices'] : array(),
				'input_attrs'     => ! empty( $field['input_attrs'] ) ? $field['input_attrs'] : array(),
				'active_callback' => ! empty( $field['active_callback'] ) ? $field['active_callback'] : '',
			);

			switch ( $field_type ) {

				case 'media':
					$wp_customize->add_control(
						new \WP_Customize_Media_Control(
							$wp_customize,
							$field_id,
							$field_args
						)
					);
					break;

				default:
					$wp_customize->add_control( $field_id, $field_args );
					break;
			}
		}
	}

	/**
	 * Get section ID.
	 *
	 * @since  1.0.0
	 * @access private
	 * @param  string $key Section key.
	 * @return string      Section ID.
	 */
	private function get_section_id( $key ) {
		return sprintf( 'wl_section_%s', $key );
	}

	/**
	 * Get field ID.
	 *
	 * @since  1.0.0
	 * @access private
	 * @param  string $key Field key.
	 * @return string      Field ID.
	 */
	private function get_field_id( $key ) {
		return sprintf( 'wl_%s', $key );
	}
}
